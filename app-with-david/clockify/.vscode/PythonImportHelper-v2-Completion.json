[
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "permissions",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "permissions",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "Project",
        "importPath": "workspace.models",
        "description": "workspace.models",
        "isExtraImport": true,
        "detail": "workspace.models",
        "documentation": {}
    },
    {
        "label": "Project",
        "importPath": "workspace.models",
        "description": "workspace.models",
        "isExtraImport": true,
        "detail": "workspace.models",
        "documentation": {}
    },
    {
        "label": "TimeRecord",
        "importPath": "workspace.models",
        "description": "workspace.models",
        "isExtraImport": true,
        "detail": "workspace.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "workspace.models",
        "description": "workspace.models",
        "isExtraImport": true,
        "detail": "workspace.models",
        "documentation": {}
    },
    {
        "label": "TimeRecord",
        "importPath": "workspace.models",
        "description": "workspace.models",
        "isExtraImport": true,
        "detail": "workspace.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "workspace.models",
        "description": "workspace.models",
        "isExtraImport": true,
        "detail": "workspace.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "workspace.models",
        "description": "workspace.models",
        "isExtraImport": true,
        "detail": "workspace.models",
        "documentation": {}
    },
    {
        "label": "Project",
        "importPath": "workspace.models",
        "description": "workspace.models",
        "isExtraImport": true,
        "detail": "workspace.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "workspace.models",
        "description": "workspace.models",
        "isExtraImport": true,
        "detail": "workspace.models",
        "documentation": {}
    },
    {
        "label": "Role",
        "importPath": "workspace.models",
        "description": "workspace.models",
        "isExtraImport": true,
        "detail": "workspace.models",
        "documentation": {}
    },
    {
        "label": "UserProject",
        "importPath": "workspace.models",
        "description": "workspace.models",
        "isExtraImport": true,
        "detail": "workspace.models",
        "documentation": {}
    },
    {
        "label": "Task",
        "importPath": "workspace.models",
        "description": "workspace.models",
        "isExtraImport": true,
        "detail": "workspace.models",
        "documentation": {}
    },
    {
        "label": "TimeRecord",
        "importPath": "workspace.models",
        "description": "workspace.models",
        "isExtraImport": true,
        "detail": "workspace.models",
        "documentation": {}
    },
    {
        "label": "UserTask",
        "importPath": "workspace.models",
        "description": "workspace.models",
        "isExtraImport": true,
        "detail": "workspace.models",
        "documentation": {}
    },
    {
        "label": "Currency",
        "importPath": "workspace.models",
        "description": "workspace.models",
        "isExtraImport": true,
        "detail": "workspace.models",
        "documentation": {}
    },
    {
        "label": "Project",
        "importPath": "workspace.models",
        "description": "workspace.models",
        "isExtraImport": true,
        "detail": "workspace.models",
        "documentation": {}
    },
    {
        "label": "Task",
        "importPath": "workspace.models",
        "description": "workspace.models",
        "isExtraImport": true,
        "detail": "workspace.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "workspace.models",
        "description": "workspace.models",
        "isExtraImport": true,
        "detail": "workspace.models",
        "documentation": {}
    },
    {
        "label": "TimeRecord",
        "importPath": "workspace.models",
        "description": "workspace.models",
        "isExtraImport": true,
        "detail": "workspace.models",
        "documentation": {}
    },
    {
        "label": "UserProject",
        "importPath": "workspace.models",
        "description": "workspace.models",
        "isExtraImport": true,
        "detail": "workspace.models",
        "documentation": {}
    },
    {
        "label": "UserTask",
        "importPath": "workspace.models",
        "description": "workspace.models",
        "isExtraImport": true,
        "detail": "workspace.models",
        "documentation": {}
    },
    {
        "label": "Role",
        "importPath": "workspace.models",
        "description": "workspace.models",
        "isExtraImport": true,
        "detail": "workspace.models",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "api_view",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "site",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "site",
        "description": "site",
        "detail": "site",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "django.contrib.auth.models",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "Group",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "AbstractUser",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "django.contrib.auth.validators",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.contrib.auth.validators",
        "description": "django.contrib.auth.validators",
        "detail": "django.contrib.auth.validators",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "connection",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "django.db.models.deletion",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.db.models.deletion",
        "description": "django.db.models.deletion",
        "detail": "django.db.models.deletion",
        "documentation": {}
    },
    {
        "label": "django.utils.timezone",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.utils.timezone",
        "description": "django.utils.timezone",
        "detail": "django.utils.timezone",
        "documentation": {}
    },
    {
        "label": "struct",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "struct",
        "description": "struct",
        "detail": "struct",
        "documentation": {}
    },
    {
        "label": "start",
        "importPath": "tracemalloc",
        "description": "tracemalloc",
        "isExtraImport": true,
        "detail": "tracemalloc",
        "documentation": {}
    },
    {
        "label": "start",
        "importPath": "tracemalloc",
        "description": "tracemalloc",
        "isExtraImport": true,
        "detail": "tracemalloc",
        "documentation": {}
    },
    {
        "label": "NullBooleanField",
        "importPath": "django.forms",
        "description": "django.forms",
        "isExtraImport": true,
        "detail": "django.forms",
        "documentation": {}
    },
    {
        "label": "NullBooleanField",
        "importPath": "django.forms",
        "description": "django.forms",
        "isExtraImport": true,
        "detail": "django.forms",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "patch",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "Mock",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "patch",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "Mock",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "strftime",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "gmtime",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "strptime",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "strftime",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "gmtime",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "struct_time",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "strftime",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "gmtime",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "strptime",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "strftime",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "gmtime",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "struct_time",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "strftime",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "localtime",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "strftime",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "TimeRecordQuerySet",
        "importPath": "workspace.querysets",
        "description": "workspace.querysets",
        "isExtraImport": true,
        "detail": "workspace.querysets",
        "documentation": {}
    },
    {
        "label": "TimeRecordQuerySet",
        "importPath": "workspace.querysets",
        "description": "workspace.querysets",
        "isExtraImport": true,
        "detail": "workspace.querysets",
        "documentation": {}
    },
    {
        "label": "TimeRecordQuerySet",
        "importPath": "workspace.querysets",
        "description": "workspace.querysets",
        "isExtraImport": true,
        "detail": "workspace.querysets",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "ReadOnlyPasswordHashField",
        "importPath": "django.contrib.auth.forms",
        "description": "django.contrib.auth.forms",
        "isExtraImport": true,
        "detail": "django.contrib.auth.forms",
        "documentation": {}
    },
    {
        "label": "UserCreationForm",
        "importPath": "django.contrib.auth.forms",
        "description": "django.contrib.auth.forms",
        "isExtraImport": true,
        "detail": "django.contrib.auth.forms",
        "documentation": {}
    },
    {
        "label": "get_objects",
        "importPath": "gc",
        "description": "gc",
        "isExtraImport": true,
        "detail": "gc",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "QuerySet",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Http404",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponseForbidden",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "Http404",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponseForbidden",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "SAFE_METHODS",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "IsAuthenticated",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "SAFE_METHODS",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "PermissionDenied",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "PermissionDenied",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "make_password",
        "importPath": "django.contrib.auth.hashers",
        "description": "django.contrib.auth.hashers",
        "isExtraImport": true,
        "detail": "django.contrib.auth.hashers",
        "documentation": {}
    },
    {
        "label": "UserCreateSerializer",
        "importPath": "djoser.serializers",
        "description": "djoser.serializers",
        "isExtraImport": true,
        "detail": "djoser.serializers",
        "documentation": {}
    },
    {
        "label": "WritableNestedModelSerializer",
        "importPath": "drf_writable_nested.serializers",
        "description": "drf_writable_nested.serializers",
        "isExtraImport": true,
        "detail": "drf_writable_nested.serializers",
        "documentation": {}
    },
    {
        "label": "CreateView",
        "importPath": "django.views.generic.edit",
        "description": "django.views.generic.edit",
        "isExtraImport": true,
        "detail": "django.views.generic.edit",
        "documentation": {}
    },
    {
        "label": "UpdateView",
        "importPath": "django.views.generic.edit",
        "description": "django.views.generic.edit",
        "isExtraImport": true,
        "detail": "django.views.generic.edit",
        "documentation": {}
    },
    {
        "label": "ListAPIView",
        "importPath": "rest_framework.generics",
        "description": "rest_framework.generics",
        "isExtraImport": true,
        "detail": "rest_framework.generics",
        "documentation": {}
    },
    {
        "label": "APIView",
        "importPath": "rest_framework.views",
        "description": "rest_framework.views",
        "isExtraImport": true,
        "detail": "rest_framework.views",
        "documentation": {}
    },
    {
        "label": "ModelViewSet",
        "importPath": "rest_framework.viewsets",
        "description": "rest_framework.viewsets",
        "isExtraImport": true,
        "detail": "rest_framework.viewsets",
        "documentation": {}
    },
    {
        "label": "AddUserProjectSerializer",
        "importPath": "workspace.serializers",
        "description": "workspace.serializers",
        "isExtraImport": true,
        "detail": "workspace.serializers",
        "documentation": {}
    },
    {
        "label": "CreateProjectSerializers",
        "importPath": "workspace.serializers",
        "description": "workspace.serializers",
        "isExtraImport": true,
        "detail": "workspace.serializers",
        "documentation": {}
    },
    {
        "label": "ListUserSerializer",
        "importPath": "workspace.serializers",
        "description": "workspace.serializers",
        "isExtraImport": true,
        "detail": "workspace.serializers",
        "documentation": {}
    },
    {
        "label": "ProjectDetailSerializer",
        "importPath": "workspace.serializers",
        "description": "workspace.serializers",
        "isExtraImport": true,
        "detail": "workspace.serializers",
        "documentation": {}
    },
    {
        "label": "ProjectSerializer",
        "importPath": "workspace.serializers",
        "description": "workspace.serializers",
        "isExtraImport": true,
        "detail": "workspace.serializers",
        "documentation": {}
    },
    {
        "label": "TaskSerializer",
        "importPath": "workspace.serializers",
        "description": "workspace.serializers",
        "isExtraImport": true,
        "detail": "workspace.serializers",
        "documentation": {}
    },
    {
        "label": "TimeRecordSerializer",
        "importPath": "workspace.serializers",
        "description": "workspace.serializers",
        "isExtraImport": true,
        "detail": "workspace.serializers",
        "documentation": {}
    },
    {
        "label": "TimeRecordStartSerializer",
        "importPath": "workspace.serializers",
        "description": "workspace.serializers",
        "isExtraImport": true,
        "detail": "workspace.serializers",
        "documentation": {}
    },
    {
        "label": "UpdateProjectSerializer",
        "importPath": "workspace.serializers",
        "description": "workspace.serializers",
        "isExtraImport": true,
        "detail": "workspace.serializers",
        "documentation": {}
    },
    {
        "label": "UserProjectSerializer",
        "importPath": "workspace.serializers",
        "description": "workspace.serializers",
        "isExtraImport": true,
        "detail": "workspace.serializers",
        "documentation": {}
    },
    {
        "label": "UserSerializer",
        "importPath": "workspace.serializers",
        "description": "workspace.serializers",
        "isExtraImport": true,
        "detail": "workspace.serializers",
        "documentation": {}
    },
    {
        "label": "ProjectTaskSerializer",
        "importPath": "workspace.serializers",
        "description": "workspace.serializers",
        "isExtraImport": true,
        "detail": "workspace.serializers",
        "documentation": {}
    },
    {
        "label": "ListProjectsSerializer",
        "importPath": "workspace.serializers",
        "description": "workspace.serializers",
        "isExtraImport": true,
        "detail": "workspace.serializers",
        "documentation": {}
    },
    {
        "label": "UserTaskSerializer",
        "importPath": "workspace.serializers",
        "description": "workspace.serializers",
        "isExtraImport": true,
        "detail": "workspace.serializers",
        "documentation": {}
    },
    {
        "label": "AddUserTaskSerializer",
        "importPath": "workspace.serializers",
        "description": "workspace.serializers",
        "isExtraImport": true,
        "detail": "workspace.serializers",
        "documentation": {}
    },
    {
        "label": "ProjectTimeRecordSerializer",
        "importPath": "workspace.serializers",
        "description": "workspace.serializers",
        "isExtraImport": true,
        "detail": "workspace.serializers",
        "documentation": {}
    },
    {
        "label": "TaskTimeRecordSerializer",
        "importPath": "workspace.serializers",
        "description": "workspace.serializers",
        "isExtraImport": true,
        "detail": "workspace.serializers",
        "documentation": {}
    },
    {
        "label": "ProjectSerializers",
        "kind": 6,
        "importPath": "api.serializers",
        "description": "api.serializers",
        "peekOfCode": "class ProjectSerializers(serializers.ModelSerializer):\n  class Meta:\n    model = Project\n    fields = '__all__'",
        "detail": "api.serializers",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "api.urls",
        "description": "api.urls",
        "peekOfCode": "urlpatterns = [\n  path('api/', views.getData),\n  path('add/', views.addProject)\n]",
        "detail": "api.urls",
        "documentation": {}
    },
    {
        "label": "getData",
        "kind": 2,
        "importPath": "api.views",
        "description": "api.views",
        "peekOfCode": "def getData(request):\n    # person = {'name':'Hanka'}\n    projects = Project.objects.all()\n    serializer = ProjectSerializers(projects, many=True)\n    return Response(serializer.data)\n@api_view(['POST'])\ndef addProject(request):\n    serializer = ProjectSerializers(data=request.data)\n    if serializer.is_valid():\n        serializer.save()",
        "detail": "api.views",
        "documentation": {}
    },
    {
        "label": "addProject",
        "kind": 2,
        "importPath": "api.views",
        "description": "api.views",
        "peekOfCode": "def addProject(request):\n    serializer = ProjectSerializers(data=request.data)\n    if serializer.is_valid():\n        serializer.save()\n    return Response(serializer.data)",
        "detail": "api.views",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "clockify.asgi",
        "description": "clockify.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "clockify.asgi",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "clockify.settings",
        "description": "clockify.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = \"django-insecure-wa_q^(3-j2lt5n&rw$6y^(&km)d&y(#j&hu)m!=j6z0p8d$t7+\"\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [",
        "detail": "clockify.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "clockify.settings",
        "description": "clockify.settings",
        "peekOfCode": "SECRET_KEY = \"django-insecure-wa_q^(3-j2lt5n&rw$6y^(&km)d&y(#j&hu)m!=j6z0p8d$t7+\"\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",",
        "detail": "clockify.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "clockify.settings",
        "description": "clockify.settings",
        "peekOfCode": "DEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",\n    \"django.contrib.messages\",\n    \"django.contrib.staticfiles\",",
        "detail": "clockify.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "clockify.settings",
        "description": "clockify.settings",
        "peekOfCode": "ALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",\n    \"django.contrib.messages\",\n    \"django.contrib.staticfiles\",\n    \"djoser\",",
        "detail": "clockify.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "clockify.settings",
        "description": "clockify.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",\n    \"django.contrib.messages\",\n    \"django.contrib.staticfiles\",\n    \"djoser\",\n    'debug_toolbar',\n    \"rest_framework\",",
        "detail": "clockify.settings",
        "documentation": {}
    },
    {
        "label": "CRISPY_TEMPLATE_PACK",
        "kind": 5,
        "importPath": "clockify.settings",
        "description": "clockify.settings",
        "peekOfCode": "CRISPY_TEMPLATE_PACK = \"bootstrap4\"\nMIDDLEWARE = [\n    \"django.middleware.security.SecurityMiddleware\",\n    \"django.contrib.sessions.middleware.SessionMiddleware\",\n    \"django.middleware.common.CommonMiddleware\",\n    \"django.middleware.csrf.CsrfViewMiddleware\",\n    \"django.contrib.auth.middleware.AuthenticationMiddleware\",\n    \"django.contrib.messages.middleware.MessageMiddleware\",\n    \"django.middleware.clickjacking.XFrameOptionsMiddleware\",\n    \"debug_toolbar.middleware.DebugToolbarMiddleware\",",
        "detail": "clockify.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "clockify.settings",
        "description": "clockify.settings",
        "peekOfCode": "MIDDLEWARE = [\n    \"django.middleware.security.SecurityMiddleware\",\n    \"django.contrib.sessions.middleware.SessionMiddleware\",\n    \"django.middleware.common.CommonMiddleware\",\n    \"django.middleware.csrf.CsrfViewMiddleware\",\n    \"django.contrib.auth.middleware.AuthenticationMiddleware\",\n    \"django.contrib.messages.middleware.MessageMiddleware\",\n    \"django.middleware.clickjacking.XFrameOptionsMiddleware\",\n    \"debug_toolbar.middleware.DebugToolbarMiddleware\",\n]",
        "detail": "clockify.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "clockify.settings",
        "description": "clockify.settings",
        "peekOfCode": "ROOT_URLCONF = \"clockify.urls\"\nTEMPLATES = [\n    {\n        \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n        \"DIRS\": [],\n        \"APP_DIRS\": True,\n        \"OPTIONS\": {\n            \"context_processors\": [\n                \"django.template.context_processors.debug\",\n                \"django.template.context_processors.request\",",
        "detail": "clockify.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "clockify.settings",
        "description": "clockify.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n        \"DIRS\": [],\n        \"APP_DIRS\": True,\n        \"OPTIONS\": {\n            \"context_processors\": [\n                \"django.template.context_processors.debug\",\n                \"django.template.context_processors.request\",\n                \"django.contrib.auth.context_processors.auth\",",
        "detail": "clockify.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "clockify.settings",
        "description": "clockify.settings",
        "peekOfCode": "WSGI_APPLICATION = \"clockify.wsgi.application\"\n# Database\n# https://docs.djangoproject.com/en/4.1/ref/settings/#databases\nDATABASES = {\n    \"default\": {\n        \"ENGINE\": \"django.db.backends.postgresql\",\n        \"NAME\": \"clockify\",\n        \"HOST\": \"localhost\",\n        \"USER\": \"postgres\",\n        \"PASSWORD\": \"HankaDS\",",
        "detail": "clockify.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "clockify.settings",
        "description": "clockify.settings",
        "peekOfCode": "DATABASES = {\n    \"default\": {\n        \"ENGINE\": \"django.db.backends.postgresql\",\n        \"NAME\": \"clockify\",\n        \"HOST\": \"localhost\",\n        \"USER\": \"postgres\",\n        \"PASSWORD\": \"HankaDS\",\n        \"PORT\": \"5432\",\n    }\n}",
        "detail": "clockify.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "clockify.settings",
        "description": "clockify.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.UserAttributeSimilarityValidator\",\n    },\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.MinimumLengthValidator\",\n    },\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.CommonPasswordValidator\",\n    },",
        "detail": "clockify.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "clockify.settings",
        "description": "clockify.settings",
        "peekOfCode": "LANGUAGE_CODE = \"en-us\"\nTIME_ZONE = \"UTC\"\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.1/howto/static-files/\nSTATIC_URL = \"static/\"\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"",
        "detail": "clockify.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "clockify.settings",
        "description": "clockify.settings",
        "peekOfCode": "TIME_ZONE = \"UTC\"\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.1/howto/static-files/\nSTATIC_URL = \"static/\"\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"\nAUTH_USER_MODEL = \"workspace.User\"",
        "detail": "clockify.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "clockify.settings",
        "description": "clockify.settings",
        "peekOfCode": "USE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.1/howto/static-files/\nSTATIC_URL = \"static/\"\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"\nAUTH_USER_MODEL = \"workspace.User\"\nLOGIN_REDIRECT_URL = \"home\"",
        "detail": "clockify.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "clockify.settings",
        "description": "clockify.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.1/howto/static-files/\nSTATIC_URL = \"static/\"\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"\nAUTH_USER_MODEL = \"workspace.User\"\nLOGIN_REDIRECT_URL = \"home\"\nLOGOUT_REDIRECT_URL = \"home\"",
        "detail": "clockify.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "clockify.settings",
        "description": "clockify.settings",
        "peekOfCode": "STATIC_URL = \"static/\"\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"\nAUTH_USER_MODEL = \"workspace.User\"\nLOGIN_REDIRECT_URL = \"home\"\nLOGOUT_REDIRECT_URL = \"home\"\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'rest_framework_simplejwt.authentication.JWTAuthentication',",
        "detail": "clockify.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "clockify.settings",
        "description": "clockify.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"\nAUTH_USER_MODEL = \"workspace.User\"\nLOGIN_REDIRECT_URL = \"home\"\nLOGOUT_REDIRECT_URL = \"home\"\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'rest_framework_simplejwt.authentication.JWTAuthentication',\n    ),\n}\nSIMPLE_JWT = {",
        "detail": "clockify.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_USER_MODEL",
        "kind": 5,
        "importPath": "clockify.settings",
        "description": "clockify.settings",
        "peekOfCode": "AUTH_USER_MODEL = \"workspace.User\"\nLOGIN_REDIRECT_URL = \"home\"\nLOGOUT_REDIRECT_URL = \"home\"\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'rest_framework_simplejwt.authentication.JWTAuthentication',\n    ),\n}\nSIMPLE_JWT = {\n    'AUTH_HEADER_TYPES': ('JWT',),",
        "detail": "clockify.settings",
        "documentation": {}
    },
    {
        "label": "LOGIN_REDIRECT_URL",
        "kind": 5,
        "importPath": "clockify.settings",
        "description": "clockify.settings",
        "peekOfCode": "LOGIN_REDIRECT_URL = \"home\"\nLOGOUT_REDIRECT_URL = \"home\"\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'rest_framework_simplejwt.authentication.JWTAuthentication',\n    ),\n}\nSIMPLE_JWT = {\n    'AUTH_HEADER_TYPES': ('JWT',),\n    \"ACCESS_TOKEN_LIFETIME\": timedelta(days=100),",
        "detail": "clockify.settings",
        "documentation": {}
    },
    {
        "label": "LOGOUT_REDIRECT_URL",
        "kind": 5,
        "importPath": "clockify.settings",
        "description": "clockify.settings",
        "peekOfCode": "LOGOUT_REDIRECT_URL = \"home\"\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'rest_framework_simplejwt.authentication.JWTAuthentication',\n    ),\n}\nSIMPLE_JWT = {\n    'AUTH_HEADER_TYPES': ('JWT',),\n    \"ACCESS_TOKEN_LIFETIME\": timedelta(days=100),\n}",
        "detail": "clockify.settings",
        "documentation": {}
    },
    {
        "label": "REST_FRAMEWORK",
        "kind": 5,
        "importPath": "clockify.settings",
        "description": "clockify.settings",
        "peekOfCode": "REST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'rest_framework_simplejwt.authentication.JWTAuthentication',\n    ),\n}\nSIMPLE_JWT = {\n    'AUTH_HEADER_TYPES': ('JWT',),\n    \"ACCESS_TOKEN_LIFETIME\": timedelta(days=100),\n}\n# DJOSER = {",
        "detail": "clockify.settings",
        "documentation": {}
    },
    {
        "label": "SIMPLE_JWT",
        "kind": 5,
        "importPath": "clockify.settings",
        "description": "clockify.settings",
        "peekOfCode": "SIMPLE_JWT = {\n    'AUTH_HEADER_TYPES': ('JWT',),\n    \"ACCESS_TOKEN_LIFETIME\": timedelta(days=100),\n}\n# DJOSER = {\n#     \"SERIALIZERS\": {\n#         \"current_user\": \"workspace.serializers.UserSerializer\",\n#     },\n# }",
        "detail": "clockify.settings",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "clockify.urls",
        "description": "clockify.urls",
        "peekOfCode": "urlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('workspace.urls')),\n    path('', include('api.urls')),\n    path('__debug__/', include('debug_toolbar.urls')),\n]",
        "detail": "clockify.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "clockify.wsgi",
        "description": "clockify.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "clockify.wsgi",
        "documentation": {}
    },
    {
        "label": "bin_dir",
        "kind": 5,
        "importPath": "env.bin.activate_this",
        "description": "env.bin.activate_this",
        "peekOfCode": "bin_dir = os.path.dirname(abs_file)\nbase = bin_dir[: -len(\"bin\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir] + os.environ.get(\"PATH\", \"\").split(os.pathsep))\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.10/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)",
        "detail": "env.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "base",
        "kind": 5,
        "importPath": "env.bin.activate_this",
        "description": "env.bin.activate_this",
        "peekOfCode": "base = bin_dir[: -len(\"bin\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir] + os.environ.get(\"PATH\", \"\").split(os.pathsep))\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.10/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]",
        "detail": "env.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"PATH\"]",
        "kind": 5,
        "importPath": "env.bin.activate_this",
        "description": "env.bin.activate_this",
        "peekOfCode": "os.environ[\"PATH\"] = os.pathsep.join([bin_dir] + os.environ.get(\"PATH\", \"\").split(os.pathsep))\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.10/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "env.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV\"]",
        "kind": 5,
        "importPath": "env.bin.activate_this",
        "description": "env.bin.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.10/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "env.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "prev_length",
        "kind": 5,
        "importPath": "env.bin.activate_this",
        "description": "env.bin.activate_this",
        "peekOfCode": "prev_length = len(sys.path)\nfor lib in \"../lib/python3.10/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "env.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.path[:]",
        "kind": 5,
        "importPath": "env.bin.activate_this",
        "description": "env.bin.activate_this",
        "peekOfCode": "sys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "env.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.real_prefix",
        "kind": 5,
        "importPath": "env.bin.activate_this",
        "description": "env.bin.activate_this",
        "peekOfCode": "sys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "env.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.prefix",
        "kind": 5,
        "importPath": "env.bin.activate_this",
        "description": "env.bin.activate_this",
        "peekOfCode": "sys.prefix = base",
        "detail": "env.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "workspace.migrations.0001_initial",
        "description": "workspace.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        (\"auth\", \"0012_alter_user_first_name_max_length\"),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name=\"User\",\n            fields=[\n                (",
        "detail": "workspace.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "workspace.migrations.0002_alter_task_id",
        "description": "workspace.migrations.0002_alter_task_id",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"workspace\", \"0001_initial\"),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name=\"task\",\n            name=\"id\",\n            field=models.AutoField(primary_key=True, serialize=False),\n        ),",
        "detail": "workspace.migrations.0002_alter_task_id",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "workspace.migrations.0003_alter_userprojectrole_project_and_more",
        "description": "workspace.migrations.0003_alter_userprojectrole_project_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"workspace\", \"0002_alter_task_id\"),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name=\"userprojectrole\",\n            name=\"project\",\n            field=models.ForeignKey(\n                on_delete=django.db.models.deletion.PROTECT,",
        "detail": "workspace.migrations.0003_alter_userprojectrole_project_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "workspace.migrations.0004_alter_userprojectrole_project_and_more",
        "description": "workspace.migrations.0004_alter_userprojectrole_project_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"workspace\", \"0003_alter_userprojectrole_project_and_more\"),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name=\"userprojectrole\",\n            name=\"project\",\n            field=models.ForeignKey(\n                on_delete=django.db.models.deletion.PROTECT,",
        "detail": "workspace.migrations.0004_alter_userprojectrole_project_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "workspace.migrations.0005_userproject_delete_userprojectrole",
        "description": "workspace.migrations.0005_userproject_delete_userprojectrole",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"workspace\", \"0004_alter_userprojectrole_project_and_more\"),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name=\"UserProject\",\n            fields=[\n                (\n                    \"id\",",
        "detail": "workspace.migrations.0005_userproject_delete_userprojectrole",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "workspace.migrations.0006_userproject_role",
        "description": "workspace.migrations.0006_userproject_role",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"workspace\", \"0005_userproject_delete_userprojectrole\"),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name=\"userproject\",\n            name=\"role\",\n            field=models.ForeignKey(\n                blank=True,",
        "detail": "workspace.migrations.0006_userproject_role",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "workspace.migrations.0007_alter_currency_shortcut_name",
        "description": "workspace.migrations.0007_alter_currency_shortcut_name",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"workspace\", \"0006_userproject_role\"),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name=\"currency\",\n            name=\"shortcut_name\",\n            field=models.CharField(blank=True, max_length=3, null=True),\n        ),",
        "detail": "workspace.migrations.0007_alter_currency_shortcut_name",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "workspace.migrations.0008_alter_currency_shortcut_name_alter_project_currency",
        "description": "workspace.migrations.0008_alter_currency_shortcut_name_alter_project_currency",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"workspace\", \"0007_alter_currency_shortcut_name\"),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name=\"currency\",\n            name=\"shortcut_name\",\n            field=models.CharField(max_length=3),\n        ),",
        "detail": "workspace.migrations.0008_alter_currency_shortcut_name_alter_project_currency",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "workspace.migrations.0009_alter_project_currency_alter_project_hex_color",
        "description": "workspace.migrations.0009_alter_project_currency_alter_project_hex_color",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"workspace\", \"0008_alter_currency_shortcut_name_alter_project_currency\"),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name=\"project\",\n            name=\"currency\",\n            field=models.ForeignKey(\n                blank=True,",
        "detail": "workspace.migrations.0009_alter_project_currency_alter_project_hex_color",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "workspace.migrations.0010_alter_userproject_project_alter_userproject_role_and_more",
        "description": "workspace.migrations.0010_alter_userproject_project_alter_userproject_role_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"workspace\", \"0009_alter_project_currency_alter_project_hex_color\"),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name=\"userproject\",\n            name=\"project\",\n            field=models.ForeignKey(\n                on_delete=django.db.models.deletion.CASCADE,",
        "detail": "workspace.migrations.0010_alter_userproject_project_alter_userproject_role_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "workspace.migrations.0011_remove_role_permissions_alter_role_name_and_more",
        "description": "workspace.migrations.0011_remove_role_permissions_alter_role_name_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"workspace\", \"0010_alter_userproject_project_alter_userproject_role_and_more\"),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name=\"role\",\n            name=\"permissions\",\n        ),\n        migrations.AlterField(",
        "detail": "workspace.migrations.0011_remove_role_permissions_alter_role_name_and_more",
        "documentation": {}
    },
    {
        "label": "create_roles",
        "kind": 2,
        "importPath": "workspace.migrations.0011_remove_role_permissions_alter_role_name_and_more",
        "description": "workspace.migrations.0011_remove_role_permissions_alter_role_name_and_more",
        "peekOfCode": "def create_roles(apps, schema_editor):\n    Role = apps.get_model(\"workspace\", \"Role\")\n    roles = [\"admin\", \"member\", \"guest\"]\n    for role in roles:\n        Role.objects.create(name=role)\ndef delete_roles(apps, schema_editor):\n    Role = apps.get_model(\"workspace\", \"Role\")\n    Role.objects.all().delete()\nclass Migration(migrations.Migration):\n    dependencies = [",
        "detail": "workspace.migrations.0011_remove_role_permissions_alter_role_name_and_more",
        "documentation": {}
    },
    {
        "label": "delete_roles",
        "kind": 2,
        "importPath": "workspace.migrations.0011_remove_role_permissions_alter_role_name_and_more",
        "description": "workspace.migrations.0011_remove_role_permissions_alter_role_name_and_more",
        "peekOfCode": "def delete_roles(apps, schema_editor):\n    Role = apps.get_model(\"workspace\", \"Role\")\n    Role.objects.all().delete()\nclass Migration(migrations.Migration):\n    dependencies = [\n        (\"workspace\", \"0010_alter_userproject_project_alter_userproject_role_and_more\"),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name=\"role\",",
        "detail": "workspace.migrations.0011_remove_role_permissions_alter_role_name_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "workspace.migrations.0012_alter_project_description",
        "description": "workspace.migrations.0012_alter_project_description",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"workspace\", \"0011_remove_role_permissions_alter_role_name_and_more\"),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name=\"project\",\n            name=\"description\",\n            field=models.TextField(blank=True, null=True),\n        ),",
        "detail": "workspace.migrations.0012_alter_project_description",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "workspace.migrations.0013_alter_userproject_role",
        "description": "workspace.migrations.0013_alter_userproject_role",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"workspace\", \"0012_alter_project_description\"),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name=\"userproject\",\n            name=\"role\",\n            field=models.ForeignKey(\n                blank=True,",
        "detail": "workspace.migrations.0013_alter_userproject_role",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "workspace.migrations.0014_alter_userproject_role",
        "description": "workspace.migrations.0014_alter_userproject_role",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"workspace\", \"0013_alter_userproject_role\"),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name=\"userproject\",\n            name=\"role\",\n            field=models.ForeignKey(\n                on_delete=django.db.models.deletion.CASCADE,",
        "detail": "workspace.migrations.0014_alter_userproject_role",
        "documentation": {}
    },
    {
        "label": "TimeRecordQuerySetTestCase",
        "kind": 6,
        "importPath": "workspace.tests.test_queryset",
        "description": "workspace.tests.test_queryset",
        "peekOfCode": "class TimeRecordQuerySetTestCase(TestCase):\n    def setUp(self):\n        start_time = strftime(\"%H:%M\")\n        date = datetime.date(2022, 12, 19)\n        self.user = User.objects.create(username=\"test\")\n        self.user_2 = User.objects.create(username=\"test_2\")\n        self.timer_first_user = TimeRecord.objects.create(\n            user=self.user, date=date, start_time=start_time\n        )\n        self.timer_second_user = TimeRecord.objects.create(",
        "detail": "workspace.tests.test_queryset",
        "documentation": {}
    },
    {
        "label": "TimeRecordTestCase",
        "kind": 6,
        "importPath": "workspace.tests.test_time_record",
        "description": "workspace.tests.test_time_record",
        "peekOfCode": "class TimeRecordTestCase(TestCase):\n    def setUp(self):  # runs before every test\n        self.user = User.objects.create(username=\"test\")\n    def tearDown(self):  # runs after every test\n        pass\n    def test_stop_time_after_midnight(self):\n        start_time = strftime(\"%H:%M\")\n        date = datetime.date(2022, 12, 19)\n        timer = TimeRecord.objects.create(user=self.user, date=date, start_time=start_time)\n        with patch(\"workspace.models.datetime\") as datetime_mock:",
        "detail": "workspace.tests.test_time_record",
        "documentation": {}
    },
    {
        "label": "TimeRecordAdmin",
        "kind": 6,
        "importPath": "workspace.admin",
        "description": "workspace.admin",
        "peekOfCode": "class TimeRecordAdmin(admin.ModelAdmin):\n    list_display = [\"id\", \"start_time\", \"end_time\", \"date\"]\nmyModels = [Project, Currency, Task, Report, User, Role, UserProject, UserTask]\nadmin.site.register(myModels)\nadmin.site.register(TimeRecord, TimeRecordAdmin)",
        "detail": "workspace.admin",
        "documentation": {}
    },
    {
        "label": "myModels",
        "kind": 5,
        "importPath": "workspace.admin",
        "description": "workspace.admin",
        "peekOfCode": "myModels = [Project, Currency, Task, Report, User, Role, UserProject, UserTask]\nadmin.site.register(myModels)\nadmin.site.register(TimeRecord, TimeRecordAdmin)",
        "detail": "workspace.admin",
        "documentation": {}
    },
    {
        "label": "WorkspaceConfig",
        "kind": 6,
        "importPath": "workspace.apps",
        "description": "workspace.apps",
        "peekOfCode": "class WorkspaceConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'workspace'",
        "detail": "workspace.apps",
        "documentation": {}
    },
    {
        "label": "RegistrationForm",
        "kind": 6,
        "importPath": "workspace.forms",
        "description": "workspace.forms",
        "peekOfCode": "class RegistrationForm(forms.ModelForm):\n    password = forms.CharField(label=\"Password\", widget=forms.PasswordInput)\n    class Meta:\n        model = User\n        fields = (\"username\", \"password\")\n    def save(self, commit=True):\n        # Save the provided password in hashed format\n        user = super().save(commit=False)\n        user.set_password(self.cleaned_data[\"password\"])\n        if commit:",
        "detail": "workspace.forms",
        "documentation": {}
    },
    {
        "label": "UserCreationForm",
        "kind": 6,
        "importPath": "workspace.forms",
        "description": "workspace.forms",
        "peekOfCode": "class UserCreationForm(forms.ModelForm):\n    password1 = forms.CharField(label=\"Password\", widget=forms.PasswordInput)\n    password2 = forms.CharField(\n        label=\"Password confirmation\", widget=forms.PasswordInput\n    )\n    class Meta:\n        model = User\n        fields = (\"username\",)\n    def clean_password2(self):\n        # Check that the two password entries match",
        "detail": "workspace.forms",
        "documentation": {}
    },
    {
        "label": "Currency",
        "kind": 6,
        "importPath": "workspace.models",
        "description": "workspace.models",
        "peekOfCode": "class Currency(models.Model):\n    shortcut_name = models.CharField(max_length=3)\n    def __str__(self):\n        return self.shortcut_name\nclass Project(models.Model):\n    name = models.CharField(max_length=255)\n    description = models.TextField(null=True, blank=True)\n    currency = models.ForeignKey(Currency, on_delete=models.SET_NULL, null=True, blank=True, related_name=\"currency\")\n    hex_color = models.CharField(max_length=7, null=True, blank=True)  # predefined colors + color picker\n    hourly_rate = models.FloatField(null=True)",
        "detail": "workspace.models",
        "documentation": {}
    },
    {
        "label": "Project",
        "kind": 6,
        "importPath": "workspace.models",
        "description": "workspace.models",
        "peekOfCode": "class Project(models.Model):\n    name = models.CharField(max_length=255)\n    description = models.TextField(null=True, blank=True)\n    currency = models.ForeignKey(Currency, on_delete=models.SET_NULL, null=True, blank=True, related_name=\"currency\")\n    hex_color = models.CharField(max_length=7, null=True, blank=True)  # predefined colors + color picker\n    hourly_rate = models.FloatField(null=True)\n    def __str__(self):\n        return self.name\nclass Task(models.Model):\n    id = models.AutoField(primary_key=True)",
        "detail": "workspace.models",
        "documentation": {}
    },
    {
        "label": "Task",
        "kind": 6,
        "importPath": "workspace.models",
        "description": "workspace.models",
        "peekOfCode": "class Task(models.Model):\n    id = models.AutoField(primary_key=True)\n    name = models.CharField(max_length=255)\n    description = models.TextField()\n    max_allocated_hours = models.FloatField(null=True, blank=True)\n    project = models.ForeignKey(Project, on_delete=models.CASCADE, related_name=\"tasks\")\n    def __str__(self):\n        return f\"{self.project.name} - {self.name}\"\nclass TimeRecord(models.Model):\n    description = models.TextField(max_length=1024, null=True, blank=True)",
        "detail": "workspace.models",
        "documentation": {}
    },
    {
        "label": "TimeRecord",
        "kind": 6,
        "importPath": "workspace.models",
        "description": "workspace.models",
        "peekOfCode": "class TimeRecord(models.Model):\n    description = models.TextField(max_length=1024, null=True, blank=True)\n    start_time = models.TimeField()  # auto add time when Object is created, make it editable\n    end_time = models.TimeField(null=True, blank=True)\n    date = models.DateField()\n    task = models.ForeignKey(Task, on_delete=models.CASCADE, null=True, blank=True, related_name=\"time_records\")\n    user = models.ForeignKey(\"User\", on_delete=models.CASCADE, related_name=\"time_records\")\n    objects = TimeRecordQuerySet.as_manager()\n    def __str__(self):\n        if self.task:",
        "detail": "workspace.models",
        "documentation": {}
    },
    {
        "label": "Report",
        "kind": 6,
        "importPath": "workspace.models",
        "description": "workspace.models",
        "peekOfCode": "class Report(models.Model):\n    created_at = models.DateTimeField(auto_now_add=True)\n    project = models.ForeignKey(Project, on_delete=models.CASCADE)\nclass User(AbstractUser):\n    def __str__(self):\n        return self.email\n    def get_currently_running_timer(self) -> TimeRecord:\n        \"\"\"If nothing found in queryset throws TimeRecord.DoesNotExist\"\"\"\n        time_records = self.time_records.filter(end_time__isnull=True)\n        if time_records.count() > 1:",
        "detail": "workspace.models",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "workspace.models",
        "description": "workspace.models",
        "peekOfCode": "class User(AbstractUser):\n    def __str__(self):\n        return self.email\n    def get_currently_running_timer(self) -> TimeRecord:\n        \"\"\"If nothing found in queryset throws TimeRecord.DoesNotExist\"\"\"\n        time_records = self.time_records.filter(end_time__isnull=True)\n        if time_records.count() > 1:\n            # throw error/ kill all but last\n            # ordered_time_records = time_records.order_by(\"-id\")\n            # latest_record = ordered_time_records[0]",
        "detail": "workspace.models",
        "documentation": {}
    },
    {
        "label": "Role",
        "kind": 6,
        "importPath": "workspace.models",
        "description": "workspace.models",
        "peekOfCode": "class Role(models.Model):\n    name = models.CharField(max_length=32, unique=True)\n    description = models.TextField()\n    def __str__(self):\n        return self.name\nclass UserTask(models.Model):\n    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name=\"user_tasks\")\n    task = models.ForeignKey(Task, on_delete=models.CASCADE, related_name=\"task_users\")\n    def __str__(self):\n        return f\"{self.user} - {self.task.name}\"",
        "detail": "workspace.models",
        "documentation": {}
    },
    {
        "label": "UserTask",
        "kind": 6,
        "importPath": "workspace.models",
        "description": "workspace.models",
        "peekOfCode": "class UserTask(models.Model):\n    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name=\"user_tasks\")\n    task = models.ForeignKey(Task, on_delete=models.CASCADE, related_name=\"task_users\")\n    def __str__(self):\n        return f\"{self.user} - {self.task.name}\"\nclass UserProject(models.Model):\n    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name=\"user_projects\")\n    project = models.ForeignKey(Project, on_delete=models.CASCADE, related_name=\"project_users\")\n    role = models.ForeignKey(Role, on_delete=models.CASCADE, related_name=\"role\")\n    def __str__(self):",
        "detail": "workspace.models",
        "documentation": {}
    },
    {
        "label": "UserProject",
        "kind": 6,
        "importPath": "workspace.models",
        "description": "workspace.models",
        "peekOfCode": "class UserProject(models.Model):\n    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name=\"user_projects\")\n    project = models.ForeignKey(Project, on_delete=models.CASCADE, related_name=\"project_users\")\n    role = models.ForeignKey(Role, on_delete=models.CASCADE, related_name=\"role\")\n    def __str__(self):\n        return f\"{self.user} - {self.project.name}\"",
        "detail": "workspace.models",
        "documentation": {}
    },
    {
        "label": "isAuthenticated",
        "kind": 6,
        "importPath": "workspace.permissions",
        "description": "workspace.permissions",
        "peekOfCode": "class isAuthenticated(permissions.BasePermission):\n    def has_permission(self, request, view):\n        return request.user.is_authenticated\nclass isProjectAdminOrMember(permissions.BasePermission):\n    def has_permission(self, request, view):\n        project_pk = view.kwargs.get('project_pk', None)\n        try:\n            user_role = UserProject.objects.get(project_id=project_pk, user_id=request.user.id).role.name\n        except UserProject.DoesNotExist:\n            return False",
        "detail": "workspace.permissions",
        "documentation": {}
    },
    {
        "label": "isProjectAdminOrMember",
        "kind": 6,
        "importPath": "workspace.permissions",
        "description": "workspace.permissions",
        "peekOfCode": "class isProjectAdminOrMember(permissions.BasePermission):\n    def has_permission(self, request, view):\n        project_pk = view.kwargs.get('project_pk', None)\n        try:\n            user_role = UserProject.objects.get(project_id=project_pk, user_id=request.user.id).role.name\n        except UserProject.DoesNotExist:\n            return False\n        if user_role == 'admin':\n            return request.method in [\"GET\", \"POST\", \"DELETE\", \"PUT\", \"PATCH\"]\n        if user_role == 'member':",
        "detail": "workspace.permissions",
        "documentation": {}
    },
    {
        "label": "isProjectAdmin",
        "kind": 6,
        "importPath": "workspace.permissions",
        "description": "workspace.permissions",
        "peekOfCode": "class isProjectAdmin(permissions.BasePermission):\n    def _has_user(self, user, related_manager):\n        return related_manager.filter(user=user).exists()\n    def has_object_permission(self, request, view, obj):\n        if isinstance(obj, Project):\n            if self._has_user(request.user, obj.project_users):\n                if obj.project_users.get(user=request.user).role.name == \"admin\":\n                    return True\n        elif isinstance(obj, UserProject):\n            admin = UserProject.objects.get(project_id=obj.project.id, role__name=\"admin\").user",
        "detail": "workspace.permissions",
        "documentation": {}
    },
    {
        "label": "IsProjectMember",
        "kind": 6,
        "importPath": "workspace.permissions",
        "description": "workspace.permissions",
        "peekOfCode": "class IsProjectMember(permissions.BasePermission):\n    def _has_user(self, user, related_manager):\n        return related_manager.filter(user=user).exists()\n    def has_object_permission(self, request, view, obj):\n        if isinstance(obj, Project):\n            if self._has_user(request.user, obj.project_users):\n                if obj.project_users.get(user=request.user).role.name == \"member\":\n                    if request.method in permissions.SAFE_METHODS:\n                        return True\n        elif isinstance(obj, TimeRecord):",
        "detail": "workspace.permissions",
        "documentation": {}
    },
    {
        "label": "IsGuest",
        "kind": 6,
        "importPath": "workspace.permissions",
        "description": "workspace.permissions",
        "peekOfCode": "class IsGuest(permissions.BasePermission):\n    \"\"\"this class is about ...\"\"\"\n    def _has_user(self, user, related_manager):\n        \"\"\"this method is about\"\"\"\n        return related_manager.filter(user=user).exists()\n    def has_object_permission(self, request, view, obj):\n        if isinstance(obj, Project):\n            if self._has_user(request.user, obj.project_users):\n                if obj.project_users.get(user=request.user).role.name == \"\":\n                    if request.method in permissions.SAFE_METHODS:",
        "detail": "workspace.permissions",
        "documentation": {}
    },
    {
        "label": "TimeRecordQuerySet",
        "kind": 6,
        "importPath": "workspace.querysets",
        "description": "workspace.querysets",
        "peekOfCode": "class TimeRecordQuerySet(QuerySet):\n    def filter_running_timers(self, user=None):\n        qs = self.filter(end_time__isnull=True)\n        if user:\n            qs = qs.filter(user=user)\n        return qs",
        "detail": "workspace.querysets",
        "documentation": {}
    },
    {
        "label": "UserCreateSerializer",
        "kind": 6,
        "importPath": "workspace.serializers",
        "description": "workspace.serializers",
        "peekOfCode": "class UserCreateSerializer(BaseUserCreateSerializer):\n    class Meta:\n        model = User\n        fields = tuple(User.REQUIRED_FIELDS) + (\n            \"id\",\n            \"username\",\n            \"password\",\n            \"email\",\n            \"first_name\",\n            \"last_name\",",
        "detail": "workspace.serializers",
        "documentation": {}
    },
    {
        "label": "CurrencySerializer",
        "kind": 6,
        "importPath": "workspace.serializers",
        "description": "workspace.serializers",
        "peekOfCode": "class CurrencySerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Currency\n        fields = [\"shortcut_name\"]\nclass ListUserSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = User\n        fields = \"__all__\"\nclass UserSerializer(serializers.ModelSerializer):\n    def validate_password(self, value: str) -> str:",
        "detail": "workspace.serializers",
        "documentation": {}
    },
    {
        "label": "ListUserSerializer",
        "kind": 6,
        "importPath": "workspace.serializers",
        "description": "workspace.serializers",
        "peekOfCode": "class ListUserSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = User\n        fields = \"__all__\"\nclass UserSerializer(serializers.ModelSerializer):\n    def validate_password(self, value: str) -> str:\n        return make_password(value)\n    class Meta:\n        model = User\n        fields = [\"id\", \"username\", \"first_name\", \"last_name\", \"email\"]",
        "detail": "workspace.serializers",
        "documentation": {}
    },
    {
        "label": "UserSerializer",
        "kind": 6,
        "importPath": "workspace.serializers",
        "description": "workspace.serializers",
        "peekOfCode": "class UserSerializer(serializers.ModelSerializer):\n    def validate_password(self, value: str) -> str:\n        return make_password(value)\n    class Meta:\n        model = User\n        fields = [\"id\", \"username\", \"first_name\", \"last_name\", \"email\"]\nclass TaskSimpleSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Task\n        fields = [\"id\", \"name\"]",
        "detail": "workspace.serializers",
        "documentation": {}
    },
    {
        "label": "TaskSimpleSerializer",
        "kind": 6,
        "importPath": "workspace.serializers",
        "description": "workspace.serializers",
        "peekOfCode": "class TaskSimpleSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Task\n        fields = [\"id\", \"name\"]\nclass UserTaskSerializer(serializers.ModelSerializer):\n    username = serializers.ReadOnlyField(source=\"user.username\")\n    user_id = serializers.ReadOnlyField(source=\"user.id\")\n    class Meta:\n        model = UserTask\n        fields = [\"id\", \"username\", \"user_id\"]",
        "detail": "workspace.serializers",
        "documentation": {}
    },
    {
        "label": "UserTaskSerializer",
        "kind": 6,
        "importPath": "workspace.serializers",
        "description": "workspace.serializers",
        "peekOfCode": "class UserTaskSerializer(serializers.ModelSerializer):\n    username = serializers.ReadOnlyField(source=\"user.username\")\n    user_id = serializers.ReadOnlyField(source=\"user.id\")\n    class Meta:\n        model = UserTask\n        fields = [\"id\", \"username\", \"user_id\"]\nclass AddUserTaskSerializer(serializers.ModelSerializer):\n    user_id = serializers.IntegerField()\n    username = serializers.ReadOnlyField(source=\"user.username\")\n    def save(self, **kwargs):",
        "detail": "workspace.serializers",
        "documentation": {}
    },
    {
        "label": "AddUserTaskSerializer",
        "kind": 6,
        "importPath": "workspace.serializers",
        "description": "workspace.serializers",
        "peekOfCode": "class AddUserTaskSerializer(serializers.ModelSerializer):\n    user_id = serializers.IntegerField()\n    username = serializers.ReadOnlyField(source=\"user.username\")\n    def save(self, **kwargs):\n        task_id = self.context[\"task_id\"]\n        user_id = self.validated_data[\"user_id\"]\n        try:\n            task_user = UserTask.objects.get(task_id=task_id, user_id=user_id)\n            task_user.save()\n        except UserTask.DoesNotExist:",
        "detail": "workspace.serializers",
        "documentation": {}
    },
    {
        "label": "TaskSerializer",
        "kind": 6,
        "importPath": "workspace.serializers",
        "description": "workspace.serializers",
        "peekOfCode": "class TaskSerializer(serializers.ModelSerializer):\n    task_users = UserTaskSerializer(many=True)\n    def create(self, validated_data):\n        project_id = self.context['request'].project.id\n        task = Task(name=validated_data[\"name\"], project_id=project_id)\n        task.save()\n        return task\n    class Meta:\n        model = Task\n        fields = [\"id\", \"name\", \"max_allocated_hours\", \"task_users\", \"project_id\", \"time_records\"]",
        "detail": "workspace.serializers",
        "documentation": {}
    },
    {
        "label": "TaskItemSerializer",
        "kind": 6,
        "importPath": "workspace.serializers",
        "description": "workspace.serializers",
        "peekOfCode": "class TaskItemSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Task\n        fields = \"__all__\"\nclass TaskProjectSimpleSerializer(serializers.ModelSerializer):\n    task_project = serializers.SerializerMethodField()\n    class Meta:\n        model = Task\n        fields = [\"id\", \"task_project\"]\n    def get_task_project(self, Task):",
        "detail": "workspace.serializers",
        "documentation": {}
    },
    {
        "label": "TaskProjectSimpleSerializer",
        "kind": 6,
        "importPath": "workspace.serializers",
        "description": "workspace.serializers",
        "peekOfCode": "class TaskProjectSimpleSerializer(serializers.ModelSerializer):\n    task_project = serializers.SerializerMethodField()\n    class Meta:\n        model = Task\n        fields = [\"id\", \"task_project\"]\n    def get_task_project(self, Task):\n        return Task.project.name\nclass ProjectTaskSerializer(serializers.ModelSerializer):\n    def create(self, validated_data):\n        project_id = self.context['project_id']",
        "detail": "workspace.serializers",
        "documentation": {}
    },
    {
        "label": "ProjectTaskSerializer",
        "kind": 6,
        "importPath": "workspace.serializers",
        "description": "workspace.serializers",
        "peekOfCode": "class ProjectTaskSerializer(serializers.ModelSerializer):\n    def create(self, validated_data):\n        project_id = self.context['project_id']\n        return Task.objects.create(project_id=project_id, **self.validated_data)\n    class Meta:\n        model = Task\n        fields = \"__all__\"\nclass ProjectTimeRecordSerializer(serializers.ModelSerializer):\n    user = serializers.SerializerMethodField()\n    task = TaskProjectSimpleSerializer()",
        "detail": "workspace.serializers",
        "documentation": {}
    },
    {
        "label": "ProjectTimeRecordSerializer",
        "kind": 6,
        "importPath": "workspace.serializers",
        "description": "workspace.serializers",
        "peekOfCode": "class ProjectTimeRecordSerializer(serializers.ModelSerializer):\n    user = serializers.SerializerMethodField()\n    task = TaskProjectSimpleSerializer()\n    project_id = serializers.ReadOnlyField(source=\"project.id\")\n    class Meta:\n        model = TimeRecord\n        fields = [\"id\", \"description\", \"start_time\", \"end_time\", \"date\", \"task\", \"user\", \"project_id\"]\n    def get_user(self, TimeRecord):\n        return TimeRecord.user.username\n    def get_task(self, TimeRecord):",
        "detail": "workspace.serializers",
        "documentation": {}
    },
    {
        "label": "TaskTimeRecordSerializer",
        "kind": 6,
        "importPath": "workspace.serializers",
        "description": "workspace.serializers",
        "peekOfCode": "class TaskTimeRecordSerializer(WritableNestedModelSerializer, serializers.ModelSerializer):\n    user = serializers.SerializerMethodField()\n    class Meta:\n        model = TimeRecord\n        fields = [\"id\", \"description\", \"start_time\", \"end_time\", \"date\", \"user\"]\n    def get_user(self, TimeRecord):\n        return TimeRecord.user.username\nclass TimeRecordSerializer(serializers.ModelSerializer):\n    user = serializers.SerializerMethodField()\n    task_id = serializers.PrimaryKeyRelatedField(queryset=Task.objects.all(), source='task.id')",
        "detail": "workspace.serializers",
        "documentation": {}
    },
    {
        "label": "TimeRecordSerializer",
        "kind": 6,
        "importPath": "workspace.serializers",
        "description": "workspace.serializers",
        "peekOfCode": "class TimeRecordSerializer(serializers.ModelSerializer):\n    user = serializers.SerializerMethodField()\n    task_id = serializers.PrimaryKeyRelatedField(queryset=Task.objects.all(), source='task.id')\n    class Meta:\n        model = TimeRecord\n        fields = [\"id\", \"description\", \"start_time\", \"end_time\", \"date\", \"task\", \"task_id\", \"user\"]\n    def get_user(self, TimeRecord):\n        return TimeRecord.user.username\n    def update(self, instance, validated_data):\n        print(validated_data)",
        "detail": "workspace.serializers",
        "documentation": {}
    },
    {
        "label": "TimeRecordStartSerializer",
        "kind": 6,
        "importPath": "workspace.serializers",
        "description": "workspace.serializers",
        "peekOfCode": "class TimeRecordStartSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = TimeRecord\n        fields = [\"description\", \"task\"]\nclass TimeRecordStopSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = TimeRecord\n        fields = [\"description\", \"task\", \"start_time\", \"end_time\"]\nclass UserProjectSerializer(serializers.ModelSerializer):\n    username = serializers.ReadOnlyField(source=\"user.username\")",
        "detail": "workspace.serializers",
        "documentation": {}
    },
    {
        "label": "TimeRecordStopSerializer",
        "kind": 6,
        "importPath": "workspace.serializers",
        "description": "workspace.serializers",
        "peekOfCode": "class TimeRecordStopSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = TimeRecord\n        fields = [\"description\", \"task\", \"start_time\", \"end_time\"]\nclass UserProjectSerializer(serializers.ModelSerializer):\n    username = serializers.ReadOnlyField(source=\"user.username\")\n    role = serializers.ReadOnlyField(source=\"role.name\")\n    user_id = serializers.ReadOnlyField(source=\"user.id\")\n    class Meta:\n        model = UserProject",
        "detail": "workspace.serializers",
        "documentation": {}
    },
    {
        "label": "UserProjectSerializer",
        "kind": 6,
        "importPath": "workspace.serializers",
        "description": "workspace.serializers",
        "peekOfCode": "class UserProjectSerializer(serializers.ModelSerializer):\n    username = serializers.ReadOnlyField(source=\"user.username\")\n    role = serializers.ReadOnlyField(source=\"role.name\")\n    user_id = serializers.ReadOnlyField(source=\"user.id\")\n    class Meta:\n        model = UserProject\n        fields = [\"id\", \"username\", \"user_id\", \"role\"]\nclass AddUserProjectSerializer(serializers.ModelSerializer):\n    user_id = serializers.IntegerField()\n    role_id = serializers.IntegerField()",
        "detail": "workspace.serializers",
        "documentation": {}
    },
    {
        "label": "AddUserProjectSerializer",
        "kind": 6,
        "importPath": "workspace.serializers",
        "description": "workspace.serializers",
        "peekOfCode": "class AddUserProjectSerializer(serializers.ModelSerializer):\n    user_id = serializers.IntegerField()\n    role_id = serializers.IntegerField()\n    def save(self, **kwargs):\n        project_id = self.context[\"project_id\"]\n        user_id = self.validated_data[\"user_id\"]\n        role_id = self.validated_data[\"role_id\"]\n        try:\n            user_project = UserProject.objects.get(project_id=project_id, user_id=user_id, role_id=role_id)\n            user_project.save()",
        "detail": "workspace.serializers",
        "documentation": {}
    },
    {
        "label": "TaskSimpleSerializer",
        "kind": 6,
        "importPath": "workspace.serializers",
        "description": "workspace.serializers",
        "peekOfCode": "class TaskSimpleSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Task\n        fields = [\"id\", \"name\"]\nclass ListProjectsSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Project\n        fields = [\"id\", \"name\"]\nclass ProjectSerializer(serializers.ModelSerializer):\n    project_users = UserProjectSerializer(many=True)",
        "detail": "workspace.serializers",
        "documentation": {}
    },
    {
        "label": "ListProjectsSerializer",
        "kind": 6,
        "importPath": "workspace.serializers",
        "description": "workspace.serializers",
        "peekOfCode": "class ListProjectsSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Project\n        fields = [\"id\", \"name\"]\nclass ProjectSerializer(serializers.ModelSerializer):\n    project_users = UserProjectSerializer(many=True)\n    class Meta:\n        model = Project\n        fields = [\"id\", \"name\", \"project_users\"]\n    def get_project_users(self, project_obj):",
        "detail": "workspace.serializers",
        "documentation": {}
    },
    {
        "label": "ProjectSerializer",
        "kind": 6,
        "importPath": "workspace.serializers",
        "description": "workspace.serializers",
        "peekOfCode": "class ProjectSerializer(serializers.ModelSerializer):\n    project_users = UserProjectSerializer(many=True)\n    class Meta:\n        model = Project\n        fields = [\"id\", \"name\", \"project_users\"]\n    def get_project_users(self, project_obj):\n        return project_obj.user.username\nclass UpdateProjectSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Project",
        "detail": "workspace.serializers",
        "documentation": {}
    },
    {
        "label": "UpdateProjectSerializer",
        "kind": 6,
        "importPath": "workspace.serializers",
        "description": "workspace.serializers",
        "peekOfCode": "class UpdateProjectSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Project\n        fields = \"__all__\"\nclass CreateProjectSerializers(serializers.ModelSerializer):\n    def create(self, validated_data):\n        project = Project(name=validated_data[\"name\"])\n        project.save()\n        user_id = self.context['request'].user.id\n        role = Role.objects.get(name=\"admin\")",
        "detail": "workspace.serializers",
        "documentation": {}
    },
    {
        "label": "CreateProjectSerializers",
        "kind": 6,
        "importPath": "workspace.serializers",
        "description": "workspace.serializers",
        "peekOfCode": "class CreateProjectSerializers(serializers.ModelSerializer):\n    def create(self, validated_data):\n        project = Project(name=validated_data[\"name\"])\n        project.save()\n        user_id = self.context['request'].user.id\n        role = Role.objects.get(name=\"admin\")\n        UserProject.objects.create(user_id=user_id, project_id=project.id, role_id=role.id)\n        return project\n    class Meta:\n        model = Project",
        "detail": "workspace.serializers",
        "documentation": {}
    },
    {
        "label": "ProjectDetailSerializer",
        "kind": 6,
        "importPath": "workspace.serializers",
        "description": "workspace.serializers",
        "peekOfCode": "class ProjectDetailSerializer(serializers.ModelSerializer):\n    tasks = TaskSimpleSerializer(many=True)\n    project_users = UserProjectSerializer(many=True)\n    currency = CurrencySerializer()\n    class Meta:\n        model = Project\n        fields = [\"id\", \"name\", \"description\", \"hourly_rate\", \"currency\", \"tasks\", \"project_users\"]\n    def get_currency(self, Project):\n        return Project.currency.shortcut_name",
        "detail": "workspace.serializers",
        "documentation": {}
    },
    {
        "label": "project_list",
        "kind": 5,
        "importPath": "workspace.urls",
        "description": "workspace.urls",
        "peekOfCode": "project_list = views.ProjectViewSet.as_view({'get': 'list', 'post': 'create'})\nproject_details = views.ProjectViewSet.as_view({\n    'get': 'retrieve',\n    'put': 'update',\n    'patch': 'partial_update',\n    'delete': 'destroy'\n})\nproject_users_list = views.UserProjectViewSet.as_view({'get': 'list', 'post': 'create'})\nproject_user_details = views.UserProjectViewSet.as_view({\n    'get': 'retrieve',",
        "detail": "workspace.urls",
        "documentation": {}
    },
    {
        "label": "project_details",
        "kind": 5,
        "importPath": "workspace.urls",
        "description": "workspace.urls",
        "peekOfCode": "project_details = views.ProjectViewSet.as_view({\n    'get': 'retrieve',\n    'put': 'update',\n    'patch': 'partial_update',\n    'delete': 'destroy'\n})\nproject_users_list = views.UserProjectViewSet.as_view({'get': 'list', 'post': 'create'})\nproject_user_details = views.UserProjectViewSet.as_view({\n    'get': 'retrieve',\n    'put': 'update',",
        "detail": "workspace.urls",
        "documentation": {}
    },
    {
        "label": "project_users_list",
        "kind": 5,
        "importPath": "workspace.urls",
        "description": "workspace.urls",
        "peekOfCode": "project_users_list = views.UserProjectViewSet.as_view({'get': 'list', 'post': 'create'})\nproject_user_details = views.UserProjectViewSet.as_view({\n    'get': 'retrieve',\n    'put': 'update',\n    'patch': 'partial_update',\n    'delete': 'destroy'\n})\nproject_tasks_list = views.TaskViewSet.as_view({'get': 'list', 'post': 'create'})\nproject_task_details = views.TaskViewSet.as_view({\n    'get': 'retrieve',",
        "detail": "workspace.urls",
        "documentation": {}
    },
    {
        "label": "project_user_details",
        "kind": 5,
        "importPath": "workspace.urls",
        "description": "workspace.urls",
        "peekOfCode": "project_user_details = views.UserProjectViewSet.as_view({\n    'get': 'retrieve',\n    'put': 'update',\n    'patch': 'partial_update',\n    'delete': 'destroy'\n})\nproject_tasks_list = views.TaskViewSet.as_view({'get': 'list', 'post': 'create'})\nproject_task_details = views.TaskViewSet.as_view({\n    'get': 'retrieve',\n    'put': 'update',",
        "detail": "workspace.urls",
        "documentation": {}
    },
    {
        "label": "project_tasks_list",
        "kind": 5,
        "importPath": "workspace.urls",
        "description": "workspace.urls",
        "peekOfCode": "project_tasks_list = views.TaskViewSet.as_view({'get': 'list', 'post': 'create'})\nproject_task_details = views.TaskViewSet.as_view({\n    'get': 'retrieve',\n    'put': 'update',\n    'patch': 'partial_update',\n    'delete': 'destroy'\n})\ntask_users_list = views.TaskUsers.as_view({'get': 'list', 'post': 'create'})\ntask_user_details = views.TaskUsers.as_view({\n    'get': 'retrieve',",
        "detail": "workspace.urls",
        "documentation": {}
    },
    {
        "label": "project_task_details",
        "kind": 5,
        "importPath": "workspace.urls",
        "description": "workspace.urls",
        "peekOfCode": "project_task_details = views.TaskViewSet.as_view({\n    'get': 'retrieve',\n    'put': 'update',\n    'patch': 'partial_update',\n    'delete': 'destroy'\n})\ntask_users_list = views.TaskUsers.as_view({'get': 'list', 'post': 'create'})\ntask_user_details = views.TaskUsers.as_view({\n    'get': 'retrieve',\n    'put': 'update',",
        "detail": "workspace.urls",
        "documentation": {}
    },
    {
        "label": "task_users_list",
        "kind": 5,
        "importPath": "workspace.urls",
        "description": "workspace.urls",
        "peekOfCode": "task_users_list = views.TaskUsers.as_view({'get': 'list', 'post': 'create'})\ntask_user_details = views.TaskUsers.as_view({\n    'get': 'retrieve',\n    'put': 'update',\n    'patch': 'partial_update',\n    'delete': 'destroy'\n})\ntask_time_records_list = views.TaskTimeRecordViewSet.as_view({'get': 'list'})\ntask_time_record_details = views.TaskTimeRecordViewSet.as_view({\n    'get': 'retrieve',",
        "detail": "workspace.urls",
        "documentation": {}
    },
    {
        "label": "task_user_details",
        "kind": 5,
        "importPath": "workspace.urls",
        "description": "workspace.urls",
        "peekOfCode": "task_user_details = views.TaskUsers.as_view({\n    'get': 'retrieve',\n    'put': 'update',\n    'patch': 'partial_update',\n    'delete': 'destroy'\n})\ntask_time_records_list = views.TaskTimeRecordViewSet.as_view({'get': 'list'})\ntask_time_record_details = views.TaskTimeRecordViewSet.as_view({\n    'get': 'retrieve',\n    'put': 'update',",
        "detail": "workspace.urls",
        "documentation": {}
    },
    {
        "label": "task_time_records_list",
        "kind": 5,
        "importPath": "workspace.urls",
        "description": "workspace.urls",
        "peekOfCode": "task_time_records_list = views.TaskTimeRecordViewSet.as_view({'get': 'list'})\ntask_time_record_details = views.TaskTimeRecordViewSet.as_view({\n    'get': 'retrieve',\n    'put': 'update',\n    'patch': 'partial_update',\n    'delete': 'destroy'\n})\nproject_time_records = views.ProjectTimeRecordViewSet.as_view({\n    'get': 'list'\n})",
        "detail": "workspace.urls",
        "documentation": {}
    },
    {
        "label": "task_time_record_details",
        "kind": 5,
        "importPath": "workspace.urls",
        "description": "workspace.urls",
        "peekOfCode": "task_time_record_details = views.TaskTimeRecordViewSet.as_view({\n    'get': 'retrieve',\n    'put': 'update',\n    'patch': 'partial_update',\n    'delete': 'destroy'\n})\nproject_time_records = views.ProjectTimeRecordViewSet.as_view({\n    'get': 'list'\n})\nproject_time_record_details = views.ProjectTimeRecordViewSet.as_view({",
        "detail": "workspace.urls",
        "documentation": {}
    },
    {
        "label": "project_time_records",
        "kind": 5,
        "importPath": "workspace.urls",
        "description": "workspace.urls",
        "peekOfCode": "project_time_records = views.ProjectTimeRecordViewSet.as_view({\n    'get': 'list'\n})\nproject_time_record_details = views.ProjectTimeRecordViewSet.as_view({\n    'get': 'retrieve',\n    'put': 'update',\n    'patch': 'partial_update',\n    'delete': 'destroy'\n})\ntime_records_list = views.TimeRecordViewSet.as_view({'get': 'list'})",
        "detail": "workspace.urls",
        "documentation": {}
    },
    {
        "label": "project_time_record_details",
        "kind": 5,
        "importPath": "workspace.urls",
        "description": "workspace.urls",
        "peekOfCode": "project_time_record_details = views.ProjectTimeRecordViewSet.as_view({\n    'get': 'retrieve',\n    'put': 'update',\n    'patch': 'partial_update',\n    'delete': 'destroy'\n})\ntime_records_list = views.TimeRecordViewSet.as_view({'get': 'list'})\ntime_record_detail = views.TimeRecordViewSet.as_view({\n    'get': 'retrieve',\n    'delete': 'destroy'",
        "detail": "workspace.urls",
        "documentation": {}
    },
    {
        "label": "time_records_list",
        "kind": 5,
        "importPath": "workspace.urls",
        "description": "workspace.urls",
        "peekOfCode": "time_records_list = views.TimeRecordViewSet.as_view({'get': 'list'})\ntime_record_detail = views.TimeRecordViewSet.as_view({\n    'get': 'retrieve',\n    'delete': 'destroy'\n})\nupdate_time_record_detail = views.TimeRecordViewSet.as_view({\n    'get': 'retrieve',\n    'put': 'update',\n    'patch': 'partial_update',\n    'delete': 'destroy'",
        "detail": "workspace.urls",
        "documentation": {}
    },
    {
        "label": "time_record_detail",
        "kind": 5,
        "importPath": "workspace.urls",
        "description": "workspace.urls",
        "peekOfCode": "time_record_detail = views.TimeRecordViewSet.as_view({\n    'get': 'retrieve',\n    'delete': 'destroy'\n})\nupdate_time_record_detail = views.TimeRecordViewSet.as_view({\n    'get': 'retrieve',\n    'put': 'update',\n    'patch': 'partial_update',\n    'delete': 'destroy'\n})",
        "detail": "workspace.urls",
        "documentation": {}
    },
    {
        "label": "update_time_record_detail",
        "kind": 5,
        "importPath": "workspace.urls",
        "description": "workspace.urls",
        "peekOfCode": "update_time_record_detail = views.TimeRecordViewSet.as_view({\n    'get': 'retrieve',\n    'put': 'update',\n    'patch': 'partial_update',\n    'delete': 'destroy'\n})\nurlpatterns = [\n    path(\"\", views.home, name=\"home\"),\n    path(\"auth/\", include(\"djoser.urls\")),\n    path(\"auth/\", include(\"djoser.urls.jwt\")),",
        "detail": "workspace.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "workspace.urls",
        "description": "workspace.urls",
        "peekOfCode": "urlpatterns = [\n    path(\"\", views.home, name=\"home\"),\n    path(\"auth/\", include(\"djoser.urls\")),\n    path(\"auth/\", include(\"djoser.urls.jwt\")),\n    path(\"register/\", views.Register.as_view(), name=\"register\"),\n    path(\"projects/\", project_list, name=\"list-projects\"),\n    path(\"projects/<int:pk>/\", project_details, name=\"project-details\"),\n    path(\"projects/<int:project_pk>/users/\", project_users_list, name=\"list-project-users\"),\n    path(\"projects/<int:project_pk>/users/<pk>/\", project_user_details, name=\"project-user-detail\"),\n    path(\"projects/<int:project_pk>/tasks/\", project_tasks_list, name=\"list-project-tasks\"),",
        "detail": "workspace.urls",
        "documentation": {}
    },
    {
        "label": "RegistrationView",
        "kind": 6,
        "importPath": "workspace.views",
        "description": "workspace.views",
        "peekOfCode": "class RegistrationView(CreateView):\n    template_name = \"workspace/register.html\"\n    form_class = RegistrationForm\n    # permission_classes = [isProjectAdmin]\n    def get_context_data(self, *args, **kwargs):\n        context = super().get_context_data(*args, **kwargs)\n        context[\"next\"] = self.request.GET.get(\"next\")\n        return context\n    def get_success_url(self):\n        next_url = self.request.POST.get(\"next\")",
        "detail": "workspace.views",
        "documentation": {}
    },
    {
        "label": "ProfileView",
        "kind": 6,
        "importPath": "workspace.views",
        "description": "workspace.views",
        "peekOfCode": "class ProfileView(UpdateView):\n    model = User\n    fields = [\"name\", \"phone\", \"date_of_birth\", \"picture\"]\n    template_name = \"workspace/profile.html\"\n    def get_success_url(self):\n        return reverse(\"index\")\n    def get_object(self):\n        return self.request.user\nclass Register(APIView):\n    def post(self, request):",
        "detail": "workspace.views",
        "documentation": {}
    },
    {
        "label": "Register",
        "kind": 6,
        "importPath": "workspace.views",
        "description": "workspace.views",
        "peekOfCode": "class Register(APIView):\n    def post(self, request):\n        form = UserCreationForm(request.POST)\n        form.is_valid()\n        form.save()\n        username = form.cleaned_data.get(\"username\")\n        messages.success(request, f\"Hi {username}, your account was successfully created\")\n        return redirect(\"home\")\nclass TrackingStart(APIView):\n    permission_classes = [IsAuthenticated]",
        "detail": "workspace.views",
        "documentation": {}
    },
    {
        "label": "TrackingStart",
        "kind": 6,
        "importPath": "workspace.views",
        "description": "workspace.views",
        "peekOfCode": "class TrackingStart(APIView):\n    permission_classes = [IsAuthenticated]\n    # kill all running\n    def find_and_kill_all_running(self, user):\n        running_timers = TimeRecord.objects.filter_running_timers(user)\n        for timer in running_timers:\n            timer.stop_time()\n    # start new\n    def post(self, request):\n        serializer = TimeRecordStartSerializer(data=request.POST)",
        "detail": "workspace.views",
        "documentation": {}
    },
    {
        "label": "StopAll",
        "kind": 6,
        "importPath": "workspace.views",
        "description": "workspace.views",
        "peekOfCode": "class StopAll(APIView):\n    permission_classes = [IsAuthenticated]\n    def post(self, request):\n        queryset = TimeRecord.objects.filter_running_timers(user=request.user)\n        for tracker in queryset:\n            tracker.stop_time()\n        serializer = TimeRecordSerializer(queryset, many=True)\n        return Response(serializer.data, status=status.HTTP_200_OK)\n# stop currently running one\nclass TrackingStop(APIView):",
        "detail": "workspace.views",
        "documentation": {}
    },
    {
        "label": "TrackingStop",
        "kind": 6,
        "importPath": "workspace.views",
        "description": "workspace.views",
        "peekOfCode": "class TrackingStop(APIView):\n    permission_classes = [IsAuthenticated]\n    def post(self, request):\n        user: User = request.user\n        try:\n            current_timer = user.get_currently_running_timer()\n        except TimeRecord.DoesNotExist:\n            Response({}, status=status.HTTP_404_NOT_FOUND)\n        current_timer.stop_time()\n        serializer = TimeRecordSerializer(current_timer)",
        "detail": "workspace.views",
        "documentation": {}
    },
    {
        "label": "ListAllUsers",
        "kind": 6,
        "importPath": "workspace.views",
        "description": "workspace.views",
        "peekOfCode": "class ListAllUsers(ListAPIView):\n    permission_classes = [IsAuthenticated]\n    serializer_class = ListUserSerializer\n    def get_queryset(self, request):\n        return User.objects.get(id=request.user.id)\nclass UserViewSet(ModelViewSet):\n    serializer_class = UserSerializer\n    def get_queryset(self):\n        return User.objects.all()\nclass ListUserProject(ListAPIView):",
        "detail": "workspace.views",
        "documentation": {}
    },
    {
        "label": "UserViewSet",
        "kind": 6,
        "importPath": "workspace.views",
        "description": "workspace.views",
        "peekOfCode": "class UserViewSet(ModelViewSet):\n    serializer_class = UserSerializer\n    def get_queryset(self):\n        return User.objects.all()\nclass ListUserProject(ListAPIView):\n    pass\nclass UserProjectViewSet(ModelViewSet):\n    def get_permissions(self):\n        if self.request.method in SAFE_METHODS:\n            self.permission_classes = [IsProjectMember]",
        "detail": "workspace.views",
        "documentation": {}
    },
    {
        "label": "ListUserProject",
        "kind": 6,
        "importPath": "workspace.views",
        "description": "workspace.views",
        "peekOfCode": "class ListUserProject(ListAPIView):\n    pass\nclass UserProjectViewSet(ModelViewSet):\n    def get_permissions(self):\n        if self.request.method in SAFE_METHODS:\n            self.permission_classes = [IsProjectMember]\n        else:\n            self.permission_classes = [isProjectAdmin]\n        return [isProjectAdminOrMember()]\n    def get_serializer_class(self):",
        "detail": "workspace.views",
        "documentation": {}
    },
    {
        "label": "UserProjectViewSet",
        "kind": 6,
        "importPath": "workspace.views",
        "description": "workspace.views",
        "peekOfCode": "class UserProjectViewSet(ModelViewSet):\n    def get_permissions(self):\n        if self.request.method in SAFE_METHODS:\n            self.permission_classes = [IsProjectMember]\n        else:\n            self.permission_classes = [isProjectAdmin]\n        return [isProjectAdminOrMember()]\n    def get_serializer_class(self):\n        if self.request.method == \"POST\":\n            return AddUserProjectSerializer",
        "detail": "workspace.views",
        "documentation": {}
    },
    {
        "label": "TimeRecordViewSet",
        "kind": 6,
        "importPath": "workspace.views",
        "description": "workspace.views",
        "peekOfCode": "class TimeRecordViewSet(ModelViewSet):\n    serializer_class = TimeRecordSerializer\n    permission_classes = [isProjectAdmin | IsProjectMember]\n    def get_queryset(self):\n        return TimeRecord.objects.filter(user=self.request.user)\nclass UpdateTimeRecordViewSet(ModelViewSet):\n    serializer_class = TimeRecordSerializer\n    permission_classes = [isProjectAdmin | IsProjectMember]\n    def get_queryset(self):\n        return TimeRecord.objects.filter(user=self.request.user)",
        "detail": "workspace.views",
        "documentation": {}
    },
    {
        "label": "UpdateTimeRecordViewSet",
        "kind": 6,
        "importPath": "workspace.views",
        "description": "workspace.views",
        "peekOfCode": "class UpdateTimeRecordViewSet(ModelViewSet):\n    serializer_class = TimeRecordSerializer\n    permission_classes = [isProjectAdmin | IsProjectMember]\n    def get_queryset(self):\n        return TimeRecord.objects.filter(user=self.request.user)\nclass TaskTimeRecordViewSet(ModelViewSet):\n    serializer_class = TaskTimeRecordSerializer\n    permission_classes = [isProjectAdmin | IsProjectMember]\n    def get_queryset(self):\n        return TimeRecord.objects.filter(task__project_id=self.kwargs[\"project_pk\"])",
        "detail": "workspace.views",
        "documentation": {}
    },
    {
        "label": "TaskTimeRecordViewSet",
        "kind": 6,
        "importPath": "workspace.views",
        "description": "workspace.views",
        "peekOfCode": "class TaskTimeRecordViewSet(ModelViewSet):\n    serializer_class = TaskTimeRecordSerializer\n    permission_classes = [isProjectAdmin | IsProjectMember]\n    def get_queryset(self):\n        return TimeRecord.objects.filter(task__project_id=self.kwargs[\"project_pk\"])\nclass ProjectTimeRecordViewSet(ModelViewSet):\n    serializer_class = TaskTimeRecordSerializer\n    def get_permissions(self):\n        if self.action == 'list':\n            permission_classes = [isProjectAdminOrMember]",
        "detail": "workspace.views",
        "documentation": {}
    },
    {
        "label": "ProjectTimeRecordViewSet",
        "kind": 6,
        "importPath": "workspace.views",
        "description": "workspace.views",
        "peekOfCode": "class ProjectTimeRecordViewSet(ModelViewSet):\n    serializer_class = TaskTimeRecordSerializer\n    def get_permissions(self):\n        if self.action == 'list':\n            permission_classes = [isProjectAdminOrMember]\n        else:\n            permission_classes = [isProjectAdmin | IsProjectMember]\n        return [permission() for permission in permission_classes]\n    def get_queryset(self):\n        return TimeRecord.objects.filter(task__project_id=self.kwargs[\"project_pk\"])",
        "detail": "workspace.views",
        "documentation": {}
    },
    {
        "label": "ProjectViewSet",
        "kind": 6,
        "importPath": "workspace.views",
        "description": "workspace.views",
        "peekOfCode": "class ProjectViewSet(ModelViewSet):\n    permission_classes = [isProjectAdmin | IsProjectMember]\n    def get_serializer_class(self):\n        if self.action == \"list\":\n            return ProjectSerializer\n        if self.request.method == \"GET\":\n            return ProjectDetailSerializer\n        if self.request.method == \"PATCH\":\n            return UpdateProjectSerializer\n        if self.request.method == \"POST\":",
        "detail": "workspace.views",
        "documentation": {}
    },
    {
        "label": "TaskViewSet",
        "kind": 6,
        "importPath": "workspace.views",
        "description": "workspace.views",
        "peekOfCode": "class TaskViewSet(ModelViewSet):\n    permission_classes = [isProjectAdminOrMember]\n    def get_serializer_class(self):\n        if self.request.method in [\"POST\", \"PATCH\"]:\n            return ProjectTaskSerializer\n        return TaskSerializer\n    def get_serializer_context(self):\n        return {\"project_id\": self.kwargs[\"project_pk\"]}\n    def get_queryset(self):\n        return Task.objects.filter(project_id=self.kwargs[\"project_pk\"]).select_related(\"project\")",
        "detail": "workspace.views",
        "documentation": {}
    },
    {
        "label": "TaskUsers",
        "kind": 6,
        "importPath": "workspace.views",
        "description": "workspace.views",
        "peekOfCode": "class TaskUsers(ModelViewSet):\n    permission_classes = [isProjectAdminOrMember]\n    def get_serializer_class(self):\n        if self.request.method in [\"POST\"]:\n            return AddUserTaskSerializer\n        return UserTaskSerializer\n    def get_serializer_context(self):\n        return {\"task_id\": self.kwargs[\"task_pk\"]}\n    def get_queryset(self):\n        return UserTask.objects.filter(task__project_id=self.kwargs[\"project_pk\"])",
        "detail": "workspace.views",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": "workspace.views",
        "description": "workspace.views",
        "peekOfCode": "def home(request):\n    return render(request, \"workspace/home.html\")\nclass RegistrationView(CreateView):\n    template_name = \"workspace/register.html\"\n    form_class = RegistrationForm\n    # permission_classes = [isProjectAdmin]\n    def get_context_data(self, *args, **kwargs):\n        context = super().get_context_data(*args, **kwargs)\n        context[\"next\"] = self.request.GET.get(\"next\")\n        return context",
        "detail": "workspace.views",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "manage",
        "description": "manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'clockify.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "manage",
        "documentation": {}
    }
]